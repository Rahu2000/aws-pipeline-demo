#!/bin/bash
##############################################
# Set value
##############################################
unset APP_NAME
unset DEPLOYMENT_NAME
unset PLATFORM

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -n|--name)
    APP_NAME="$2"
    shift # past argument
    shift # past value
    ;;
    -p|--platform)
    PLATFORM="$2"
    shift # past argument
    shift # past value
    ;;
    -d|--deployment-name)
    DEPLOYMENT_NAME="$2"
    shift # past argument
    shift # past value
    ;;
    -c|--cross-account-profile)
    CROSS_ACCOUNT_PROFILE="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Check mandatory field
if [ -z "$APP_NAME" ]; then
    echo 'Application name is required.'
    echo 'Usage:'
    echo '  generate_codedeploy_cross_account' 
    echo '      -n APP_NAME'
    echo '      [-p PLATFORM <default:Server>]'
    echo '      [-d DEPLOYMENT_NAME]'
    echo '      -c CROSS_ACCOUNT_PROFILE'
    exit 1
fi

# Check mandatory field
if [ -z "$CROSS_ACCOUNT_PROFILE" ]; then
    echo 'Cross account profile is required.'
    echo 'Usage:'
    echo '  generate_codedeploy_cross_account' 
    echo '      -n APP_NAME'
    echo '      [-p PLATFORM <default:Server>]'
    echo '      [-d DEPLOYMENT_NAME]'
    echo '      -c CROSS_ACCOUNT_PROFILE'
    exit 1
fi

# Set default platform
if [ -z $PLATFORM ]; then
    PLATFORM="Server"
fi

# Set default deployment name
if [ -z $DEPLOYMENT_NAME ]; then
    DEPLOYMENT_NAME=$APP_NAME-deploy-group
fi

# Validate platform
if [[ ! $PLATFORM =~ ^(Server|Lambda|ECS)$ ]]; then
    echo "Platform $PLATFORM is not supported"
    echo "Supported platforms are 'Server|Lambda|ECS'"
    exit 9
fi

echo 'Codedeploy creation started...'

##############################################
# create codedeploy service role
##############################################
# Set default codedeploy service role name
CODEDEPLOY_SERVICE_ROLE='CodeDeployServiceRole'
./create_codedeploy_service_role $CODEDEPLOY_SERVICE_ROLE $CROSS_ACCOUNT_PROFILE
if [ 0 -ne $? ]; then
    echo "Creating 'codedeploy service role' failed."
    exit 9
fi

# Set codedeploy service role arn
CODEDEPLOY_SERVICE_ROLE_ARN="$(aws iam get-role --role-name $CODEDEPLOY_SERVICE_ROLE --profile $CROSS_ACCOUNT_PROFILE 2> /dev/null | jq -r '.Role.Arn')"

##############################################
# create application
##############################################
# Get ApplicationId
CODEDEPLOY_APP_ID="$(aws deploy get-application --application-name $APP_NAME --profile $CROSS_ACCOUNT_PROFILE 2> /dev/null | jq -r '.application.applicationId')"

# create application
if [ -z $CODEDEPLOY_APP_ID ]; then
    CODEDEPLOY_APP_ID="$(aws deploy create-application --application-name $APP_NAME --compute-platform $PLATFORM --profile $CROSS_ACCOUNT_PROFILE | jq -r '.applicationId')"
    sleep 1
fi

##############################################
# create application deployment group
##############################################

# EC2 Type deployment
if [ "Server" == "$PLATFORM" ]; then
    DEPLOYMENT_GROUP_FLAG="$(aws deploy list-deployment-groups --application-name $APP_NAME --profile $CROSS_ACCOUNT_PROFILE | jq -c --arg deploymentGroup $DEPLOYMENT_NAME '.deploymentGroups[] | contains ($deploymentGroup)')"
    if [ "$DEPLOYMENT_GROUP_FLAG" == true ]; then
        echo "$DEPLOYMENT_NAME is already exist."
    else
        aws deploy create-deployment-group \
            --profile $CROSS_ACCOUNT_PROFILE \
            --application-name $APP_NAME \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name $DEPLOYMENT_NAME \
            --ec2-tag-filters Key=Name,Value=$APP_NAME,Type=KEY_AND_VALUE \
            --service-role-arn $CODEDEPLOY_SERVICE_ROLE_ARN \
            --auto-rollback-configuration file://stubs/auto_rollback_enable.json \
            --deployment-style file://stubs/deployment_style.json
            #--auto-scaling-groups $AUTO_SCALING_GROUPS \
            #--load-balancer-info $LOAD_BALANCER_INFO
    fi
fi

exit 0