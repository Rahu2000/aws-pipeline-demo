#!/bin/bash

##############################################
# Set value
##############################################
unset PIPELINE_NAME
unset CROSS_ACCOUNT_PROFILE

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -n|--name)
    KMS_KEY_ALIAS="$2"
    shift # past argument
    shift # past value
    ;;
    -rn|--service-role-name)
    CODEPIPELINE_SERVICE_ROLE_NAME="$2" # service role name
    shift # past argument
    shift # past value
    ;;
    -c|--cross-account-profile)
    CROSS_ACCOUNT_PROFILE="$2" # cross account profile
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

##############################################
# Arguments validation
##############################################
if [ -z "$KMS_KEY_ALIAS" ]; then
    echo 'key alias is required.'
    echo 'Usage: put_custom_key_policy_cross_account -n KMS_KEY_ALIAS -rn CODEPIPELINE_SERVICE_ROLE_NAME -c CROSS_ACCOUNT_PROFILE'
    exit 9
fi

if [ -z "$CROSS_ACCOUNT_PROFILE" ]; then
    echo 'Cross account profile is required.'
    echo 'Usage: put_custom_key_policy_cross_account -n KMS_KEY_ALIAS -rn CODEPIPELINE_SERVICE_ROLE_NAME -c CROSS_ACCOUNT_PROFILE'
    exit 9
fi

if [ -z "$CODEPIPELINE_SERVICE_ROLE_NAME" ]; then
    echo 'Codepipeline service role name is required.'
    echo 'Usage: put_custom_key_policy_cross_account -n KMS_KEY_ALIAS -rn CODEPIPELINE_SERVICE_ROLE_NAME -c CROSS_ACCOUNT_PROFILE'
    exit 9
fi

##############################################
# Parmeters validation
##############################################
ADMIN_ACCOUNT_ARN="$(aws sts get-caller-identity | jq -r '.Arn')"
ADMIN_ACCOUNT_ID="$(echo $ADMIN_ACCOUNT_ARN | cut -d ':' -f 5)"
ADMIN_USER_ID="$(echo $ADMIN_ACCOUNT_ARN | cut -d '/' -f 2)"
CROSS_ACCOUNT_ID="$(aws sts get-caller-identity --profile $CROSS_ACCOUNT_PROFILE | jq -r '.Account')"

if [ -z $ADMIN_ACCOUNT_ID ]; then
    echo The default aws account is not valid.
    exit 9
fi

if [ -z $CROSS_ACCOUNT_ID ]; then
    echo $CROSS_ACCOUNT_PROFILE is not valid profile.
    exit 9
fi

##############################################
# Get informations for Key generation
##############################################
REGION="$(aws configure get region)"
# Get Codepipeline service role ARN
CODEPIPELINE_SERVICE_ROLE_ARN="$(aws iam get-role --role-name $CODEPIPELINE_SERVICE_ROLE_NAME 2> /dev/null | jq -r '.Role.Arn')"
if [ -z $CODEPIPELINE_SERVICE_ROLE_ARN ]; then
    echo $CODEPIPELINE_SERVICE_ROLE_NAME is not found. check pipeline service roles.
    exit 9
fi

SERVICE_ROLE_ARNS=",\"$CODEPIPELINE_SERVICE_ROLE_ARN"\"
# Replace SERVICE_ROLE_ARNS
REPLACE_STR='\/'
SERVICE_ROLE_ARNS="${SERVICE_ROLE_ARNS//\//$REPLACE_STR}"

##############################################
# Get customer KMS key
##############################################
# Get KMS key information
KMS_KEY_ID="$(aws kms list-aliases 2> /dev/null | jq -c --arg alias $KMS_KEY_ALIAS '.Aliases[] | select(.AliasName == $alias)' | jq -r '.TargetKeyId')"
if [ -z $KMS_KEY_ID ]; then
    echo 'KMS key is not found.'
    exit 9
fi

##############################################
# Attach policy to customer KMS key 
##############################################
# generate a key policy file
KEY_FILE=kms-key-"$(uuidgen)".json
cat policies/KMSKeyConsolePolicyforCrossAccount.json \
    | sed "s/ADMIN-ACCOUNT-ID/$ADMIN_ACCOUNT_ID/g" \
    | sed "s/ADMIN-USER-ID/$ADMIN_USER_ID/g" \
    | sed "s/CROSS-ACCOUNT-ID/$CROSS_ACCOUNT_ID/g" \
    | sed "s/,\"SERVICE-ROLE-ARNS\"/$SERVICE_ROLE_ARNS/g" \
    | sed 's/"/\\"/g' \
    > .config/"$KEY_FILE"
sed -i -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' .config/"$KEY_FILE"
cat <<EOF > .config/"$KEY_FILE"
{
  "Policy": "$(cat .config/"$KEY_FILE")"
}
EOF

# put the policy to the KMS key
aws kms put-key-policy \
--key-id $KMS_KEY_ID \
--policy-name default \
--cli-input-json file://.config/"$KEY_FILE"

exit 0