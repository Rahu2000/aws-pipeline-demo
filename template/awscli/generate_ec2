#!/bin/bash
###################################################
# Set ENVs
###################################################
IMAGE_ID="$(aws ec2 describe-images --owners amazon --filters 'Name=name,Values=amzn2-ami-hvm-2.0.????????-x86_64-gp2' 'Name=state,Values=available' --output json | jq -r '.Images | sort_by(.CreationDate) | last(.[]).ImageId')"

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -n|--name)
    DEPLOY_GROUP_NAME="$2"
    shift # past argument
    shift # past value
    ;;
    -it|--instance-type)
    INSTANCE_TYPE="$2"
    shift # past argument
    shift # past value
    ;;
    -ic|--instance-count)
    INSTANCE_COUNT="$2"
    shift # past argument
    shift # past value
    ;;
    -is|--instace-volue-size)
    INSTANCE_VOLUME_SIZE="$2"
    shift # past argument
    shift # past value
    ;;
    -k|--key)
    KEY_NAME="$2"
    shift # past argument
    shift # past value
    ;;
    -vpc|--vpc-id)
    VPC_ID="$2"
    shift # past argument
    shift # past value
    ;;
    -subnet|--subnet-id)
    SUBNET_ID="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ -z $DEPLOY_GROUP_NAME ]; then
    echo 'Deploy name is required'
    exit 9
fi

if [ -z "$INSTANCE_TYPE" ]; then
    INSTANCE_TYPE=t2.micro
fi

if [ -z "$INSTANCE_COUNT" ]; then
    INSTANCE_COUNT=1
fi

if [ -z "$INSTANCE_VOLUME_SIZE" ]; then
    INSTANCE_VOLUME_SIZE=8
fi

if [ -z "$KEY_NAME" ]; then
    KEY_NAME=$DEPLOY_GROUP_NAME
fi

INSTANCE_ROLE_NAME='AWSCodeDeployRoleforEC2'
USER_DATA_PATH='stubs/ec2_userdata_amazon_ami.txt'
SSH_SEC_GROUP_NAME='SSHAccess'
WEB_SEC_GROUP_NAME='WebService'

###################################################
# Check exist EC2 Server
###################################################
EC2="$(aws ec2 describe-instances --query 'Reservations[*].Instances[*]' --filters "[{\"Name\":\"instance-state-name\",\"Values\":[\"running\",\"pending\"]},{\"Name\":\"tag-key\",\"Values\":[\"Name\"]},{\"Name\":\"tag-value\",\"Values\":[\"$DEPLOY_GROUP_NAME\"]}]" | jq -r '.[]')"

if [ -n "$EC2" ]; then
    echo 'EC2 Server exist.'
    exit 0
fi

###################################################
# Get VPC Info
###################################################
VPC_ID="$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" | jq -r '.Vpcs | last(.[]).VpcId')"
SUBNET_ID="$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" | jq -r '.Subnets | sort_by(.AvailabilityZone) | last(.[]).SubnetId')"

if [ -z $VPC_ID ] | [ -z $SUBNET_ID ]; then
    echo 'Default vpc is not exist'
    exit 8
fi
###################################################
# Get Key Pair
###################################################
HAS_KEY="$(aws ec2 describe-key-pairs --key-name $KEY_NAME 2> /dev/null | jq -r '.KeyPairs | last(.[]).KeyName')"
if [ -z $HAS_KEY ]; then
    aws ec2 create-key-pair --key-name $KEY_NAME --query 'KeyMaterial' --output text > .config/"$KEY_NAME".pem
    echo "New key file has downloaded at '$(pwd)/$KEY_NAME.pem'"
fi

###################################################
# Get Security Group
###################################################
./create_security_group $VPC_ID $SSH_SEC_GROUP_NAME $WEB_SEC_GROUP_NAME
if [ 0 -ne $? ]; then
    echo "Failed to create security groups"
    exit 9
fi

SSH_SEC_GROUP_ID="$(aws ec2 describe-security-groups --group-name $SSH_SEC_GROUP_NAME --filters "Name=vpc-id,Values=$VPC_ID" 2> /dev/null | jq -r '.SecurityGroups | last(.[]).GroupId')"
HTTP_SEC_GROUP_ID="$(aws ec2 describe-security-groups --group-name $WEB_SEC_GROUP_NAME --filters "Name=vpc-id,Values=$VPC_ID" 2> /dev/null | jq -r '.SecurityGroups | last(.[]).GroupId')"

###################################################
# Get IAM instance profile for CodeDeploy
###################################################
./create_ec2_profile $INSTANCE_ROLE_NAME
if [ 0 -ne $? ]; then
    echo "Failed to create instance profile."
    exit 9
fi

###################################################
# Generate Instance
###################################################
# Launch EC2 Instance
echo 'Launch EC2 Instance...'

INSTANCE_PROFILE="$(aws iam get-instance-profile --instance-profile-name $INSTANCE_ROLE_NAME 2> /dev/null | jq -r '.InstanceProfile.InstanceProfileName')"

if [ -z $INSTANCE_PROFILE ] || [ 'null' == $INSTANCE_PROFILE ] ; then
    echo "Failed to create instance profile."
    exit 9
fi

INSTANCE_ID="$(aws ec2 run-instances --image-id $IMAGE_ID --count $INSTANCE_COUNT --instance-type $INSTANCE_TYPE --key-name $KEY_NAME --security-group-ids $SSH_SEC_GROUP_ID $HTTP_SEC_GROUP_ID --subnet-id $SUBNET_ID --block-device-mappings "[{\"DeviceName\":\"/dev/xvda\",\"Ebs\":{\"VolumeSize\":$INSTANCE_VOLUME_SIZE,\"DeleteOnTermination\":true}}]" --user-data file://$USER_DATA_PATH --iam-instance-profile Name=$INSTANCE_PROFILE | jq -r '.Instances | last(.[]).InstanceId')" 

if [ -z $INSTANCE_ID ]; then
    echo 'EC2 failed to launch'
    exit 9
fi

# Tag for CodeDeploy
aws ec2 create-tags --resources $INSTANCE_ID --tags Key=Name,Value=$DEPLOY_GROUP_NAME

exit 0